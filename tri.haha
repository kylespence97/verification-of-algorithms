function tri (n : Z) : Z
	//the loop counter within this function, i which becomes n, decrements towards 0 so cannot be less than 0
	precondition n >= 0
	//the return value of this function must be half the value of the product of n and n+1
	postcondition tri = (n * (n + 1)) / 2
	var i : Z
	var ans : Z
begin
	i := n
	//i must be equal to its assigned value of n, which must match the precondition
	{i = n /\ n >= 0}
	ans := 0
	//additionally, ans must now be equal to its assigned value of 0
	{i = n /\ n >= 0 /\ ans = 0}
	while i != 0 do
	//upon entering the loop, the invariant must be true and i (alongside n which initialized it) must be greater than or equal to the terminate condition
	invariant ((i * (i + 1)) / 2) + ans = (n * (n + 1)) / 2 /\ i >= 0 /\ n >= 0
	begin
		ans := ans + i
		//following this assignment, the invariant must be true when i (which is greater than 0) is decremented and n is still greater than or equal to 0 
		{(((i - 1) * i) / 2) + ans = (n * (n + 1)) / 2 /\ i > 0 /\ n >= 0}
		i := i - 1
		//upon exiting the loop, the conditions for which the loop was entered must be matched (invariant)
		{((i * (i + 1)) / 2) + ans = (n * (n + 1)) / 2 /\ i >= 0 /\ n >= 0}
		skip
	end
//the value that will be returned must now satisfy the precondition, the loop invariant must be true and the loop terminate condition must be true	
{ans = (n * (n + 1)) / 2 /\ ((i * (i + 1)) / 2) + ans = (n * (n + 1)) / 2 /\ i = 0}
tri := ans
end